#include <iostream>
#include <vector>

using namespace std;

class MaxHeap {
    vector<int> arr;
    int size;

public:
    MaxHeap() {
        arr.push_back(-1);  // Start with index 1, so index 0 is unused
        size = 0;
    }

    void insert(int value) {
        size++;
        arr.push_back(value);  // Insert at the end
        int i = size;

        // Bubble up the value to maintain max heap property
        while (i > 1 && arr[i / 2] < arr[i]) {
            swap(arr[i], arr[i / 2]);
            i /= 2;
        }
    }

    void deletion() {
        if (size == 0) {
            cout << "Heap is empty!" << endl;
            return;
        }

        // Step 1: Replace root with last element
        arr[1] = arr[size];
        size--;  // Decrease the size of the heap
        arr.pop_back();  // Remove the last element from the vector

        // Step 2: Heapify down from the root
        int idx = 1;  // Start heapifying from the root
        while (idx <= size) {
            int left = 2 * idx;      // Left child index
            int right = 2 * idx + 1; // Right child index
            int largest = idx;

            // Compare with left child
            if (left <= size && arr[left] > arr[largest])
                largest = left;

            // Compare with right child
            if (right <= size && arr[right] > arr[largest])
                largest = right;

            // If the largest is not the current index, swap and continue
            if (largest != idx) {
                swap(arr[idx], arr[largest]);
                idx = largest;  // Move down to the largest child
            } else {
                break;  // If no swap is needed, break out of the loop
            }
        }
    }

    void printHeap() {
        for (int i = 1; i <= size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    MaxHeap h;
    h.insert(50);
    h.insert(30);
    h.insert(40);
    h.insert(10);
    h.insert(5);
    h.insert(20);
    h.insert(30);

    cout << "Max Heap: ";
    h.printHeap();

    h.deletion();  // Deleting the root
    cout << "After deleting root: ";
    h.printHeap();

    return 0;
}
